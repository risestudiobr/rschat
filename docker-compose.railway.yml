version: "3.9"

x-common-env: &common_env
  RAILS_ENV: production
  RAILS_LOG_TO_STDOUT: "true"
  RAILS_SERVE_STATIC_FILES: "true"
  SECRET_KEY_BASE: ${SECRET_KEY_BASE}
  FRONTEND_URL: ${FRONTEND_URL}
  DATABASE_URL: ${DATABASE_URL}
  REDIS_URL: ${REDIS_URL}
  # --- SMTP (opcional, para convites/reset de senha) ---
  # MAILER_SENDER_EMAIL: ${MAILER_SENDER_EMAIL}
  # SMTP_ADDRESS: ${SMTP_ADDRESS}
  # SMTP_PORT: ${SMTP_PORT}
  # SMTP_USERNAME: ${SMTP_USERNAME}
  # SMTP_PASSWORD: ${SMTP_PASSWORD}
  # SMTP_AUTHENTICATION: login
  # SMTP_ENABLE_STARTTLS_AUTO: "true"
  # --- Storage (recomendado S3/R2; evite volume local) ---
  # ACTIVE_STORAGE_SERVICE: ${ACTIVE_STORAGE_SERVICE} # ex: S3
  # AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  # AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  # AWS_REGION: ${AWS_REGION}
  # S3_BUCKET: ${S3_BUCKET}
  # S3_ENDPOINT: ${S3_ENDPOINT} # se usar R2/MinIO

services:
  web:
    # Usa seu PRÓPRIO repo (o Railway vai buildar usando o Dockerfile do seu fork)
    build:
      context: .
      dockerfile: Dockerfile
    command: bundle exec puma -C config/puma.rb
    environment:
      <<: *common_env
    ports:
      - "3000:3000" # Railway publica automático; manter para compat.
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:3000/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: bundle exec sidekiq -C config/sidekiq.yml
    environment:
      <<: *common_env
    # sem porta exposta
